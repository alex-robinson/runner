usage: job run [-h] [-m INTERFACE] [-p [NAME=SPEC [NAME=SPEC ...]] | -i
               PARAMS_FILE] [-j I,J...,START-STOP:STEP,...]
               [--include-default] [-o EXPDIR] [-a]
               [--max-workers MAX_WORKERS] [-t TIMEOUT] [--shell] [--echo]
               [-f]

Run model ensemble

Requires `job setup` prior execution.

where `EXECUTABLE` is your model executable or a command, followed by its
arguments. Note the `--` that separates `job run` arguments `OPTIONS` from the
executable.  When there is no ambiguity in the command-line arguments (as seen
by python's argparse) it may be dropped. `job run` options determine in which
manner to run the model, which parameter values to vary (the ensemble), and how
to communicate these parameter values to the model.

optional arguments:
  -h, --help            show this help message and exit
  -p [NAME=SPEC [NAME=SPEC ...]], --params [NAME=SPEC [NAME=SPEC ...]]
                        Param values to combine. SPEC specifies discrete
                        parameter values as a comma-separated list
                        `VALUE[,VALUE...]` or a range `START:STOP:N`.
  -i PARAMS_FILE, --params-file PARAMS_FILE
                        ensemble parameters file
  -j I,J...,START-STOP:STEP,..., --id I,J...,START-STOP:STEP,...
                        select one or several ensemble members (0-based !),
                        slurm sbatch --array syntax, e.g. `0,2,4` or `0-4:2`
                        or a combination of these, `0,2,4,5` <==> `0-4:2,5`
  --include-default     also run default model version (with no parameters)

model interface:
  -m INTERFACE, --interface INTERFACE
                        model interface. If not provided will look for
                        interface[.py, .pickle, .json] (the last two are
                        produced by job setup)

simulation settings:
  -o EXPDIR, --out-dir EXPDIR
                        experiment directory (params.txt and logs/ will be
                        created, as well as individual model output
                        directories
  -a, --auto-dir        run directory named according to parameter values
                        instead of run `id`

simulation modes:
  --max-workers MAX_WORKERS
                        number of workers for parallel processing (need to be
                        allocated, e.g. via sbatch) -- default to the number
                        of runs
  -t TIMEOUT, --timeout TIMEOUT
                        timeout in seconds (default to 31536000)
  --shell               print output to terminal instead of log file, run
                        sequentially, mostly useful for testing/debugging
  --echo                display commands instead of running them (but does
                        setup output directory). Alias for --shell --force
                        echo [model args ...]
  -f, --force           perform run even if params.txt already exists
                        directory

Examples
--------

    job setup echo --a {a} --b {b} --out {}
    job run -p a=2,3,4 b=0,1 -o out --shell

    --a 2 --b 0 --out out/0
    --a 2 --b 1 --out out/1
    --a 3 --b 0 --out out/2
    --a 3 --b 1 --out out/3
    --a 4 --b 0 --out out/4
    --a 4 --b 1 --out out/5

The command above runs an ensemble of 6 model versions, by calling `echo --a {a}
--b {b} --out {}`  where `{a}`, `{b}` and `{}` are formatted using runtime with
parameter and run directory values, as displayed in the output above. Parameters can also be provided as a file:

    job setup --file-name "params.txt" --file-type "linesep" --line-sep " " -- cat {}/params.txt
    job run -p a=2,3,4 b=0,1 -o out --shell

    a 2
    b 0
    a 2
    b 1
    a 3
    b 0
    a 3
    b 1
    a 4
    b 0
    a 4
    b 1

Where UNIX `cat` command displays file content into the terminal. File types
that involve grouping, such as namelist, require a group prefix with a `.`
separator in the parameter name:

    job setup --file-name "params.txt" --file-type "namelist" cat {}/params.txt
    job run -p g1.a=0,1 g2.b=2. -o out --shell

    &g1
     a               = 0          
    /
    &g2
     b               = 2.0        
    /
    &g1
     a               = 1          
    /
    &g2
     b               = 2.0        
    /
