!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Analysis	play.py	/^class Analysis(object):$/;"	c
Constraint	simtools/costfunction.py	/^class Constraint(object):$/;"	c
DEFAULT_ALPHA_TARGET	simtools/resample.py	/^DEFAULT_ALPHA_TARGET = 0.95$/;"	v
DEFAULT_SIZE	simtools/resample.py	/^DEFAULT_SIZE = 500$/;"	v
EPSILON	simtools/resample.py	/^EPSILON = 0.05  # start value for adaptive_posterior_exponent (kept if NEFF in NEFF_BOUNDS)$/;"	v
EPSILON_BOUNDS	simtools/resample.py	/^EPSILON_BOUNDS = (1e-3, 0.1)  # has priority over NEFF_BOUNDS$/;"	v
ExperimentConfig	play.py	/^class ExperimentConfig(object):$/;"	c
GENPARAMS	old/play.py.back	/^GENPARAMS = "scripts\/genparams.py"$/;"	v
GLACIER	glaciermodel.py	/^GLACIER = "glacier"$/;"	v
GlobalConfig	play.py	/^class GlobalConfig(object):$/;"	c
JOBSCRIPT	old/play.py.back	/^JOBSCRIPT = "job.sh"$/;"	v
LogNormal	simtools/costfunction.py	/^class LogNormal(Constraint):$/;"	c
MultiVariateNormal	simtools/costfunction.py	/^class MultiVariateNormal(Constraint):$/;"	c
NEFF_BOUNDS	simtools/resample.py	/^NEFF_BOUNDS = (0.5, 0.9)$/;"	v
Normal	simtools/costfunction.py	/^class Normal(Constraint):$/;"	c
RMS	simtools/costfunction.py	/^class RMS(Constraint):$/;"	c
RUNSCRIPT	old/play.py.back	/^RUNSCRIPT = "run.py"$/;"	v
SAMPLING_METHOD	simtools/resample.py	/^SAMPLING_METHOD = "residual"$/;"	v
SEC_IN_YEAR	glaciermodel.py	/^SEC_IN_YEAR = 3600*24*365.25$/;"	v
Uniform	simtools/costfunction.py	/^class Uniform(Constraint):$/;"	c
__init__	play.py	/^    def __init__(self, cfg):$/;"	m	class:Analysis
__init__	play.py	/^    def __init__(self, data):$/;"	m	class:GlobalConfig
__init__	play.py	/^    def __init__(self, data, glacier, size=None, expdir=None):$/;"	m	class:ExperimentConfig
__init__	simtools/costfunction.py	/^    def __init__(self, name, dist, units="", desc=""):$/;"	m	class:Constraint
__init__	simtools/costfunction.py	/^    def __init__(self, name, low, hi, units="", desc=""):$/;"	m	class:Uniform
__init__	simtools/costfunction.py	/^    def __init__(self, name, mean, cov, units="", desc=""):$/;"	m	class:MultiVariateNormal
__init__	simtools/costfunction.py	/^    def __init__(self, name, mean, sd, mask=None, units="", desc=""):$/;"	m	class:RMS
__init__	simtools/costfunction.py	/^    def __init__(self, name, mean, sd, units="", desc=""):$/;"	m	class:Normal
__init__	simtools/costfunction.py	/^    def __init__(self, name, s, loc, scale, units="", desc=""):$/;"	m	class:LogNormal
_build_ids	simtools/resample.py	/^def _build_ids(counts):$/;"	f
_check_literal_indices	glaciermodel.py	/^def _check_literal_indices(indices, **kwargs):$/;"	f
_get_Neff	simtools/resample.py	/^def _get_Neff(weights):$/;"	f
_get_gl	glaciermodel.py	/^def _get_gl(H, zb, rho_sw=1028, rho_i = 917):$/;"	f
_get_terminus	glaciermodel.py	/^def _get_terminus(ds):$/;"	f
_loglik	play.py	/^    def _loglik(ds, name, c, runid=None):$/;"	m	class:Analysis
_parse_val	simtools/genparams.py	/^def _parse_val(s):$/;"	f
adaptive_posterior_exponent	simtools/resample.py	/^def adaptive_posterior_exponent(likelihood, epsilon=None, neff_bounds=NEFF_BOUNDS):$/;"	f
add_jitter	simtools/resample.py	/^def add_jitter(params, epsilon, bounds=None):$/;"	f
autoset_params	glaciermodel.py	/^def autoset_params(netcdf):$/;"	f
bounds_parser	simtools/resample.py	/^def bounds_parser(params_bounds):$/;"	f
configfile	play.py	/^configfile = "config.json"$/;"	v
constraints	play.py	/^    def constraints(self):$/;"	m	class:ExperimentConfig
default	play.py	/^    def default(self):$/;"	m	class:ExperimentConfig
driving_stress	glaciermodel.py	/^def driving_stress(x, z, h, rho_i=910, g=9.81):$/;"	f
ensemble_loglik	simtools/costfunction.py	/^def ensemble_loglik(states, constraints):$/;"	f
experimentsdir	play.py	/^experimentsdir = "experiments"$/;"	v
genparams	play.py	/^    def genparams(self, log=None):$/;"	m	class:ExperimentConfig
genparams_args	play.py	/^    def genparams_args(self, out=None):$/;"	m	class:ExperimentConfig
get_constraints	play.py	/^    def get_constraints(self):$/;"	m	class:ExperimentConfig
get_ensemble_size	simtools/costfunction.py	/^def get_ensemble_size(outdir):$/;"	f
get_expconfig	play.py	/^    def get_expconfig(self, name, glacier, size=None, expdir=None):$/;"	m	class:GlobalConfig
get_size	play.py	/^    def get_size(self):$/;"	m	class:ExperimentConfig
getparams	play.py	/^    def getparams(self, pfile=None):$/;"	m	class:ExperimentConfig
glacierargs	play.py	/^    def glacierargs(self, runid=None, outdir=None, cmd_extra=""):$/;"	m	class:ExperimentConfig
glacierexe	play.py	/^glacierexe = "glacier"$/;"	v
glaciernc	play.py	/^    def glaciernc(self, runid=None):$/;"	m	class:ExperimentConfig
glaciersdir	play.py	/^glaciersdir = "glaciers"$/;"	v
json_to_cmd	old/play.py.back	/^def json_to_cmd(prior, out=None, scriptname=GENPARAMS):$/;"	f
loglik	play.py	/^    def loglik(self, runid=None, verbose=False):$/;"	m	class:Analysis
loglik_ensemble	play.py	/^    def loglik_ensemble(self, indices=None):$/;"	m	class:Analysis
logpdf	simtools/costfunction.py	/^    def logpdf(self, state):$/;"	m	class:Constraint
logpdf	simtools/costfunction.py	/^    def logpdf(self, state):$/;"	m	class:RMS
main	old/play.py.back	/^def main(argv=None):$/;"	f
main	play.py	/^def main(argv=None):$/;"	f
main	simtools/genparams.py	/^def main(argv=None):$/;"	f
main	simtools/resample.py	/^def main():$/;"	f
make_jobfile_slurm	play.py	/^def make_jobfile_slurm(command, queue, jobname, account, output, error):$/;"	f
maybe_transform_param	glaciermodel.py	/^def maybe_transform_param(name, value):$/;"	f
mean	simtools/costfunction.py	/^    def mean(self):$/;"	m	class:Constraint
multinomial_resampling	simtools/resample.py	/^def multinomial_resampling(weights, size):$/;"	f
name	play.py	/^    def name(self):$/;"	m	class:ExperimentConfig
nans	glaciermodel.py	/^def nans(shp):$/;"	f
nans	play.py	/^def nans(N):$/;"	f
params_parser	simtools/genparams.py	/^def params_parser(string):$/;"	f
paramsfile	play.py	/^    def paramsfile(self):$/;"	m	class:ExperimentConfig
parse_constraint	simtools/costfunction.py	/^def parse_constraint(*args):$/;"	f
parse_indices	glaciermodel.py	/^def parse_indices(spec, literal_indices=['gl','c']):$/;"	f
parse_param_dist	simtools/genparams.py	/^def parse_param_dist(string):$/;"	f
parse_param_list	simtools/genparams.py	/^def parse_param_list(string):$/;"	f
parse_param_range	simtools/genparams.py	/^def parse_param_range(string):$/;"	f
parse_scipydist	simtools/costfunction.py	/^def parse_scipydist(string):$/;"	f
parse_slurm_array_indices	play.py	/^def parse_slurm_array_indices(a):$/;"	f
prior	play.py	/^    def prior(self):$/;"	m	class:ExperimentConfig
read	play.py	/^    def read(cls, file=configfile):$/;"	m	class:GlobalConfig
read_ensemble_params	simtools/modelrun.py	/^def read_ensemble_params(pfile):$/;"	f
read_model	glaciermodel.py	/^def read_model(ds, name):$/;"	f
read_params	simtools/resample.py	/^def read_params(pfile):$/;"	f
residual_resampling	simtools/resample.py	/^def residual_resampling(weights, size):$/;"	f
run_background	simtools/modelrun.py	/^def run_background(executable, cmd_args=(), ini_dir='.', logfile='out.out'):$/;"	f
run_ensemble_background	old/play.py.back	/^def run_ensemble_background(ncfile, configfile, paramsfile, outdir, runscript=RUNSCRIPT):$/;"	f
run_foreground	simtools/modelrun.py	/^def run_foreground(executable, cmd_args=(), ini_dir='.', logfile=None):$/;"	f
rundir	play.py	/^    def rundir(self, runid=None):$/;"	m	class:ExperimentConfig
sample_with_bounds_check	simtools/resample.py	/^def sample_with_bounds_check(params, covjitter, bounds):$/;"	f
str_pmatrix	simtools/genparams.py	/^def str_pmatrix(pnames, pmatrix, max_rows=1e20, include_index=True, index=None):$/;"	f
str_pmatrix	simtools/resample.py	/^def str_pmatrix(pnames, pmatrix, max_rows=10, include_index=True, index=None):$/;"	f
submit_ensemble	old/play.py.back	/^def submit_ensemble(ncfile, configfile, paramsfile, outdir, jobscript=JOBSCRIPT):$/;"	f
trim	play.sh	/^trim () { while read -r line; do echo "$line"; done; }$/;"	f
