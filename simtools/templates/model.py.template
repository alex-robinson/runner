#!/usr/bin/env python
"""This model script is automatically generated by simtools

    {{ command }}
"""
import os
import argparse
import json
import subprocess

EXECUTABLE = "{{model.executable}}"

parser = argparse.ArgumentParser(description=__doc__)
{%- for p in model.params %}
parser.add_argument('--{{p.name}}', default={{p.default}}, type={{p.type}})
{%- endfor %}

# additional arguments (should not overlap !)
parser.add_argument('-o', '--output-dir', required=True, help='output directory')
parser.add_argument('other_arguments', nargs=argparse.REMAINDER, default=[],
                    help='anything else is passed to the model without interference')


def parse_args(argv=None):
    """parse input arguments from job
    """
    o = parser.parse_args(argv)
    kw = vars(o) # as a dict
    output_dir = kw.pop('output_dir')
    other = kw.pop('other_arguments')
    if other and other[0] == '--':
        other = other[1:]
    params = vars(kw)  # dictionary
    return output_dir, other, params



def make_command(output_dir, *args, **params):
    """make command from parameter keyword arguments
    """
    # create command line
    command_args = [EXECUTABLE] + "{{model.out_template}}".format(output_dir).split()

    for arg in args:
        command_args.append(arg)

    # prepare modified command-line arguments with appropriate format
    for p in params:
        command_args.append("{{model.arg_template}}".format(name=p, value=params[p]))

    return command_args

def make_env(output_dir, **params):
    "set environment variables needed for the run"
    {%- if model.setenviron %}
    # pass parameters as environment variables
    env = os.environ.copy()
    env["rundir"] = output_dir
    for p in params:
        env[p] = str(params[p])
    return env
    {% else %}
    return None
    {%- endif %}


def setup_output_dir(output_dir, **params):
    """write parameters to a file for the actual model to read it?
    see simtools.filetype and simtools.ext.namelist
    """
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)


def getvar(name, output_dir):
    """return a state variable given its output directory
    """
    raise NotImplementedError('need to be defined !')


def main():
    """main function
    """
    output_dir, other, params = parse_args()

    setup_output_dir(output_dir, **params)
    command = make_command(output_dir, *other, **params)
    env = make_env(output_dir, **params)
    print(" ".join(command))
    subprocess.call(command, env=env)


if __name__ == '__main__':
    main()
